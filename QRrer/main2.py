#!/usr/bin/env python3
"""
–ü–†–û–î–í–ò–ù–£–¢–´–ô –ì–ï–ù–ï–†–ê–¢–û–† QR-–ö–û–î–û–í –° –®–ò–§–†–û–í–ê–ù–ò–ï–ú –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô
"""

import os
import sys
import subprocess
import importlib.metadata
from pathlib import Path
import base64
import zlib
from Crypto.Cipher import AES
from Crypto.Util.Padding import pad, unpad
from Crypto.Random import get_random_bytes
import hashlib

class DependencyManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
    
    REQUIRED_PACKAGES = {
        'qrcode': '7.4.2',
        'Pillow': '9.0.0',
        'vobject': '0.9.6',
        'pycryptodome': '3.20.0'
    }
    
    @classmethod
    def check_dependencies(cls):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏"""
        missing_packages = []
        
        print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
        
        for package, required_version in cls.REQUIRED_PACKAGES.items():
            try:
                installed_version = importlib.metadata.version(package)
                print(f"‚úÖ {package}: {installed_version} (—Ç—Ä–µ–±—É–µ—Ç—Å—è: {required_version}+)")
                
            except importlib.metadata.PackageNotFoundError:
                print(f"‚ùå {package}: –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                missing_packages.append(package)
        
        if missing_packages:
            print(f"\nüì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –ø–∞–∫–µ—Ç–æ–≤: {', '.join(missing_packages)}")
            cls.install_packages(missing_packages)
        else:
            print("\n‚úÖ –í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!")
    
    @classmethod
    def install_packages(cls, packages):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–∞–∫–µ—Ç—ã —á–µ—Ä–µ–∑ pip"""
        try:
            for package in packages:
                print(f"üì¶ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é {package}...")
                subprocess.check_call([sys.executable, "-m", "pip", "install", 
                                     f"{package}>={cls.REQUIRED_PACKAGES[package]}"])
            print("‚úÖ –í—Å–µ –ø–∞–∫–µ—Ç—ã —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!")
        except subprocess.CalledProcessError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–∞–∫–µ—Ç–æ–≤: {e}")
            sys.exit(1)

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
DependencyManager.check_dependencies()

import qrcode
from PIL import Image, ImageDraw, ImageFont
import json
from datetime import datetime

class ImageEncoder:
    """–ö–ª–∞—Å—Å –¥–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –∏ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
    
    @staticmethod
    def image_to_base64(image_path, max_size_kb=500):
        """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ base64 —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π —Ä–∞–∑–º–µ—Ä–∞"""
        try:
            with Image.open(image_path) as img:
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ RGB –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                if img.mode in ('RGBA', 'LA'):
                    background = Image.new('RGB', img.size, (255, 255, 255))
                    background.paste(img, mask=img.split()[-1] if img.mode == 'RGBA' else None)
                    img = background
                
                # –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—Ä –¥–ª—è QR-–∫–æ–¥–∞
                quality = 85
                while True:
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π –±—É—Ñ–µ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–∑–º–µ—Ä–∞
                    from io import BytesIO
                    buffer = BytesIO()
                    img.save(buffer, format='JPEG', quality=quality, optimize=True)
                    size_kb = len(buffer.getvalue()) // 1024
                    
                    if size_kb <= max_size_kb or quality <= 10:
                        break
                    quality -= 15
                
                # –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                buffer.seek(0)
                image_data = buffer.getvalue()
                
                # –ö–æ–¥–∏—Ä—É–µ–º –≤ base64
                base64_data = base64.b64encode(image_data).decode('utf-8')
                
                print(f"üìä –†–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {size_kb} KB, –∫–∞—á–µ—Å—Ç–≤–æ: {quality}%")
                return f"data:image/jpeg;base64,{base64_data}"
                
        except Exception as e:
            raise Exception(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
    
    @staticmethod
    def encrypt_data(data, password):
        """–®–∏—Ñ—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º AES"""
        try:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª—é—á –∏–∑ –ø–∞—Ä–æ–ª—è
            key = hashlib.sha256(password.encode()).digest()
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–π IV
            iv = get_random_bytes(16)
            
            # –°–æ–∑–¥–∞–µ–º —à–∏—Ñ—Ä
            cipher = AES.new(key, AES.MODE_CBC, iv)
            
            # –®–∏—Ñ—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
            encrypted_data = cipher.encrypt(pad(data.encode(), AES.block_size))
            
            # –ö–æ–º–±–∏–Ω–∏—Ä—É–µ–º IV + –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            result = iv + encrypted_data
            
            # –ö–æ–¥–∏—Ä—É–µ–º –≤ base64
            return base64.b64encode(result).decode('utf-8')
            
        except Exception as e:
            raise Exception(f"–û—à–∏–±–∫–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è: {e}")
    
    @staticmethod
    def decrypt_data(encrypted_data, password):
        """–†–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ"""
        try:
            # –î–µ–∫–æ–¥–∏—Ä—É–µ–º –∏–∑ base64
            encrypted_bytes = base64.b64decode(encrypted_data)
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º IV –∏ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            iv = encrypted_bytes[:16]
            encrypted_bytes = encrypted_bytes[16:]
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª—é—á
            key = hashlib.sha256(password.encode()).digest()
            
            # –°–æ–∑–¥–∞–µ–º —à–∏—Ñ—Ä –¥–ª—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏
            cipher = AES.new(key, AES.MODE_CBC, iv)
            
            # –†–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ–º
            decrypted_data = unpad(cipher.decrypt(encrypted_bytes), AES.block_size)
            
            return decrypted_data.decode('utf-8')
            
        except Exception as e:
            raise Exception(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏: {e}")
    
    @staticmethod
    def compress_data(data):
        """–°–∂–∏–º–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ"""
        return base64.b64encode(zlib.compress(data.encode())).decode('utf-8')
    
    @staticmethod
    def decompress_data(compressed_data):
        """–†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ"""
        return zlib.decompress(base64.b64decode(compressed_data)).decode('utf-8')

class QRCodeGenerator:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ QR-–∫–æ–¥–æ–≤"""
    
    def __init__(self):
        self.data_types = {
            '1': {'name': 'üåê URL/–°—Å—ã–ª–∫–∞', 'handler': self.create_url_qr},
            '2': {'name': 'üìù –¢–µ–∫—Å—Ç', 'handler': self.create_text_qr},
            '3': {'name': 'üì∂ WiFi', 'handler': self.create_wifi_qr},
            '4': {'name': 'üìß Email', 'handler': self.create_email_qr},
            '5': {'name': 'üí¨ SMS', 'handler': self.create_sms_qr},
            '6': {'name': 'üë§ vCard (–∫–æ–Ω—Ç–∞–∫—Ç)', 'handler': self.create_vcard_qr},
            '7': {'name': 'üìç –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è', 'handler': self.create_geo_qr},
            '8': {'name': 'üìû –¢–µ–ª–µ—Ñ–æ–Ω', 'handler': self.create_phone_qr},
            '9': {'name': 'üìÖ –°–æ–±—ã—Ç–∏–µ', 'handler': self.create_event_qr},
            '10': {'name': 'üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (Base64)', 'handler': self.create_image_qr},
            '11': {'name': 'üîê –ó–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ', 'handler': self.create_encrypted_image_qr},
            '12': {'name': 'üìÅ –§–∞–π–ª (—Ç–µ–∫—Å—Ç–æ–≤—ã–π)', 'handler': self.create_file_qr}
        }
        
        self.encoder = ImageEncoder()
    
    def clear_screen(self):
        """–û—á–∏—â–∞–µ—Ç —ç–∫—Ä–∞–Ω –∫–æ–Ω—Å–æ–ª–∏"""
        os.system('cls' if os.name == 'nt' else 'clear')
    
    def print_header(self):
        """–í—ã–≤–æ–¥–∏—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–æ–≥—Ä–∞–º–º—ã"""
        print("üéØ" + "="*60)
        print("           –ü–†–û–î–í–ò–ù–£–¢–´–ô –ì–ï–ù–ï–†–ê–¢–û–† QR-–ö–û–î–û–í –° –®–ò–§–†–û–í–ê–ù–ò–ï–ú")
        print("="*60 + "üéØ")
        print()
    
    def get_user_choice(self, options, prompt="–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é"):
        """–ü–æ–ª—É—á–∞–µ—Ç –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        while True:
            print(f"\n{prompt}:")
            for key, value in options.items():
                print(f"  {key}) {value}")
            
            choice = input("\n–í–∞—à –≤—ã–±–æ—Ä: ").strip()
            if choice in options:
                return choice
            else:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    
    def get_input(self, prompt, required=True, default=None, password=False):
        """–ü–æ–ª—É—á–∞–µ—Ç –≤–≤–æ–¥ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        while True:
            if default:
                user_input = input(f"{prompt} [{default}]: ").strip()
                if not user_input:
                    return default
            else:
                if password:
                    import getpass
                    user_input = getpass.getpass(f"{prompt}: ")
                else:
                    user_input = input(f"{prompt}: ").strip()
            
            if not required or user_input:
                return user_input
            print("‚ùå –≠—Ç–æ –ø–æ–ª–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è.")
    
    def create_url_qr(self):
        """–°–æ–∑–¥–∞–µ—Ç QR-–∫–æ–¥ –¥–ª—è URL"""
        print("\nüåê –°–û–ó–î–ê–ù–ò–ï QR-–ö–û–î–ê –î–õ–Ø URL")
        print("-" * 30)
        
        url = self.get_input("–í–≤–µ–¥–∏—Ç–µ URL (—Å http:// –∏–ª–∏ https://)", required=True)
        filename = self.get_input("–ò–º—è —Ñ–∞–π–ª–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è", required=False, default="url_qr.png")
        
        return url, filename
    
    def create_text_qr(self):
        """–°–æ–∑–¥–∞–µ—Ç QR-–∫–æ–¥ –¥–ª—è —Ç–µ–∫—Å—Ç–∞"""
        print("\nüìù –°–û–ó–î–ê–ù–ò–ï QR-–ö–û–î–ê –î–õ–Ø –¢–ï–ö–°–¢–ê")
        print("-" * 30)
        
        text = self.get_input("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç", required=True)
        filename = self.get_input("–ò–º—è —Ñ–∞–π–ª–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è", required=False, default="text_qr.png")
        
        return text, filename
    
    def create_wifi_qr(self):
        """–°–æ–∑–¥–∞–µ—Ç QR-–∫–æ–¥ –¥–ª—è WiFi"""
        print("\nüì∂ –°–û–ó–î–ê–ù–ò–ï QR-–ö–û–î–ê –î–õ–Ø WiFi")
        print("-" * 30)
        
        ssid = self.get_input("–ù–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ç–∏ (SSID)", required=True)
        password = self.get_input("–ü–∞—Ä–æ–ª—å", required=False)
        encryption = self.get_user_choice(
            {'WPA': 'WPA/WPA2', 'WEP': 'WEP', 'nopass': '–ë–µ–∑ –ø–∞—Ä–æ–ª—è'},
            "–¢–∏–ø —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è"
        )
        
        hidden = self.get_input("–°–∫—Ä—ã—Ç–∞—è —Å–µ—Ç—å? (y/n)", required=False, default="n").lower() == 'y'
        
        wifi_config = f"WIFI:S:{ssid};T:{encryption};"
        if password:
            wifi_config += f"P:{password};"
        if hidden:
            wifi_config += "H:true;"
        wifi_config += ";"
        
        filename = self.get_input("–ò–º—è —Ñ–∞–π–ª–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è", required=False, default="wifi_qr.png")
        
        return wifi_config, filename
    
    def create_email_qr(self):
        """–°–æ–∑–¥–∞–µ—Ç QR-–∫–æ–¥ –¥–ª—è Email"""
        print("\nüìß –°–û–ó–î–ê–ù–ò–ï QR-–ö–û–î–ê –î–õ–Ø EMAIL")
        print("-" * 30)
        
        email = self.get_input("Email –ø–æ–ª—É—á–∞—Ç–µ–ª—è", required=True)
        subject = self.get_input("–¢–µ–º–∞ –ø–∏—Å—å–º–∞", required=False)
        body = self.get_input("–¢–µ–∫—Å—Ç –ø–∏—Å—å–º–∞", required=False)
        
        email_url = f"mailto:{email}"
        params = []
        if subject:
            params.append(f"subject={self.url_encode(subject)}")
        if body:
            params.append(f"body={self.url_encode(body)}")
        
        if params:
            email_url += "?" + "&".join(params)
        
        filename = self.get_input("–ò–º—è —Ñ–∞–π–ª–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è", required=False, default="email_qr.png")
        
        return email_url, filename
    
    def create_sms_qr(self):
        """–°–æ–∑–¥–∞–µ—Ç QR-–∫–æ–¥ –¥–ª—è SMS"""
        print("\nüí¨ –°–û–ó–î–ê–ù–ò–ï QR-–ö–û–î–ê –î–õ–Ø SMS")
        print("-" * 30)
        
        number = self.get_input("–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", required=True)
        message = self.get_input("–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è", required=False)
        
        sms_url = f"sms:{number}"
        if message:
            sms_url += f"?body={self.url_encode(message)}"
        
        filename = self.get_input("–ò–º—è —Ñ–∞–π–ª–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è", required=False, default="sms_qr.png")
        
        return sms_url, filename
    
    def create_vcard_qr(self):
        """–°–æ–∑–¥–∞–µ—Ç QR-–∫–æ–¥ –¥–ª—è vCard"""
        print("\nüë§ –°–û–ó–î–ê–ù–ò–ï QR-–ö–û–î–ê –î–õ–Ø VCARD (–ö–û–ù–¢–ê–ö–¢)")
        print("-" * 30)
        
        print("\n–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω—Ç–∞–∫—Ç–µ:")
        first_name = self.get_input("–ò–º—è", required=True)
        last_name = self.get_input("–§–∞–º–∏–ª–∏—è", required=False)
        company = self.get_input("–ö–æ–º–ø–∞–Ω–∏—è", required=False)
        title = self.get_input("–î–æ–ª–∂–Ω–æ—Å—Ç—å", required=False)
        phone = self.get_input("–¢–µ–ª–µ—Ñ–æ–Ω", required=False)
        email = self.get_input("Email", required=False)
        website = self.get_input("–í–µ–±-—Å–∞–π—Ç", required=False)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º vCard
        vcard = [
            "BEGIN:VCARD",
            "VERSION:3.0",
            f"N:{last_name or ''};{first_name or ''};;;",
            f"FN:{first_name} {last_name or ''}",
        ]
        
        if company:
            vcard.append(f"ORG:{company}")
        if title:
            vcard.append(f"TITLE:{title}")
        if phone:
            vcard.append(f"TEL;TYPE=WORK,VOICE:{phone}")
        if email:
            vcard.append(f"EMAIL;TYPE=WORK:{email}")
        if website:
            vcard.append(f"URL:{website}")
        
        vcard.append("END:VCARD")
        
        vcard_data = "\n".join(vcard)
        filename = self.get_input("–ò–º—è —Ñ–∞–π–ª–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è", required=False, default="contact_qr.png")
        
        return vcard_data, filename
    
    def create_geo_qr(self):
        """–°–æ–∑–¥–∞–µ—Ç QR-–∫–æ–¥ –¥–ª—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏"""
        print("\nüìç –°–û–ó–î–ê–ù–ò–ï QR-–ö–û–î–ê –î–õ–Ø –ì–ï–û–õ–û–ö–ê–¶–ò–ò")
        print("-" * 30)
        
        latitude = self.get_input("–®–∏—Ä–æ—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 55.7558)", required=True)
        longitude = self.get_input("–î–æ–ª–≥–æ—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 37.6173)", required=True)
        altitude = self.get_input("–í—ã—Å–æ—Ç–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)", required=False)
        
        geo_url = f"geo:{latitude},{longitude}"
        if altitude:
            geo_url += f",{altitude}"
        
        filename = self.get_input("–ò–º—è —Ñ–∞–π–ª–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è", required=False, default="geo_qr.png")
        
        return geo_url, filename
    
    def create_phone_qr(self):
        """–°–æ–∑–¥–∞–µ—Ç QR-–∫–æ–¥ –¥–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
        print("\nüìû –°–û–ó–î–ê–ù–ò–ï QR-–ö–û–î–ê –î–õ–Ø –¢–ï–õ–ï–§–û–ù–ê")
        print("-" * 30)
        
        number = self.get_input("–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", required=True)
        phone_url = f"tel:{number}"
        
        filename = self.get_input("–ò–º—è —Ñ–∞–π–ª–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è", required=False, default="phone_qr.png")
        
        return phone_url, filename
    
    def create_event_qr(self):
        """–°–æ–∑–¥–∞–µ—Ç QR-–∫–æ–¥ –¥–ª—è —Å–æ–±—ã—Ç–∏—è"""
        print("\nüìÖ –°–û–ó–î–ê–ù–ò–ï QR-–ö–û–î–ê –î–õ–Ø –°–û–ë–´–¢–ò–Ø")
        print("-" * 30)
        
        title = self.get_input("–ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è", required=True)
        location = self.get_input("–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ", required=False)
        description = self.get_input("–û–ø–∏—Å–∞–Ω–∏–µ", required=False)
        start_date = self.get_input("–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ (–ì–ì–ì–ì–ú–ú–î–î)", required=False)
        end_date = self.get_input("–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è (–ì–ì–ì–ì–ú–ú–î–î)", required=False)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ
        event = [
            "BEGIN:VEVENT",
            f"SUMMARY:{title}",
        ]
        
        if location:
            event.append(f"LOCATION:{location}")
        if description:
            event.append(f"DESCRIPTION:{description}")
        if start_date:
            event.append(f"DTSTART:{start_date}")
        if end_date:
            event.append(f"DTEND:{end_date}")
        
        event.append("END:VEVENT")
        
        event_data = "\n".join(event)
        filename = self.get_input("–ò–º—è —Ñ–∞–π–ª–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è", required=False, default="event_qr.png")
        
        return event_data, filename
    
    def create_image_qr(self):
        """–°–æ–∑–¥–∞–µ—Ç QR-–∫–æ–¥ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –≤ base64"""
        print("\nüñºÔ∏è –°–û–ó–î–ê–ù–ò–ï QR-–ö–û–î–ê –° –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ï–ú")
        print("-" * 30)
        
        image_path = self.get_input("–ü—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é", required=True)
        
        if not os.path.exists(image_path):
            print("‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return None, None
        
        try:
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ base64
            base64_image = self.encoder.image_to_base64(image_path)
            
            # –°–æ–∑–¥–∞–µ–º JSON —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
            image_data = {
                "type": "image",
                "format": "jpeg",
                "data": base64_image,
                "timestamp": datetime.now().isoformat()
            }
            
            data = json.dumps(image_data, ensure_ascii=False)
            filename = self.get_input("–ò–º—è —Ñ–∞–π–ª–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è", required=False, default="image_qr.png")
            
            return data, filename
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
            return None, None
    
    def create_encrypted_image_qr(self):
        """–°–æ–∑–¥–∞–µ—Ç QR-–∫–æ–¥ —Å –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º"""
        print("\nüîê –°–û–ó–î–ê–ù–ò–ï QR-–ö–û–î–ê –° –ó–ê–®–ò–§–†–û–í–ê–ù–ù–´–ú –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ï–ú")
        print("-" * 40)
        
        image_path = self.get_input("–ü—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é", required=True)
        password = self.get_input("–ü–∞—Ä–æ–ª—å –¥–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è", required=True, password=True)
        confirm_password = self.get_input("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å", required=True, password=True)
        
        if password != confirm_password:
            print("‚ùå –ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç!")
            return None, None
        
        if not os.path.exists(image_path):
            print("‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return None, None
        
        try:
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ base64
            base64_image = self.encoder.image_to_base64(image_path, max_size_kb=300)
            
            # –®–∏—Ñ—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
            encrypted_data = self.encoder.encrypt_data(base64_image, password)
            
            # –°–æ–∑–¥–∞–µ–º JSON —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
            encrypted_package = {
                "type": "encrypted_image",
                "algorithm": "AES-256-CBC",
                "data": encrypted_data,
                "timestamp": datetime.now().isoformat()
            }
            
            data = json.dumps(encrypted_package, ensure_ascii=False)
            filename = self.get_input("–ò–º—è —Ñ–∞–π–ª–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è", required=False, default="encrypted_image_qr.png")
            
            print("‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–æ!")
            return data, filename
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è: {e}")
            return None, None
    
    def create_file_qr(self):
        """–°–æ–∑–¥–∞–µ—Ç QR-–∫–æ–¥ —Å —Ç–µ–∫—Å—Ç–æ–≤—ã–º —Ñ–∞–π–ª–æ–º"""
        print("\nüìÅ –°–û–ó–î–ê–ù–ò–ï QR-–ö–û–î–ê –° –¢–ï–ö–°–¢–û–í–´–ú –§–ê–ô–õ–û–ú")
        print("-" * 35)
        
        file_path = self.get_input("–ü—É—Ç—å –∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–º—É —Ñ–∞–π–ª—É", required=True)
        
        if not os.path.exists(file_path):
            print("‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return None, None
        
        try:
            # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
            with open(file_path, 'r', encoding='utf-8') as f:
                file_content = f.read()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä
            if len(file_content) > 10000:  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª—è QR-–∫–æ–¥–∞
                print("‚ö†Ô∏è –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –¥–ª—è QR-–∫–æ–¥–∞. –ë—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã –ø–µ—Ä–≤—ã–µ 10000 —Å–∏–º–≤–æ–ª–æ–≤.")
                file_content = file_content[:10000]
            
            # –°–æ–∑–¥–∞–µ–º JSON —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
            file_data = {
                "type": "text_file",
                "filename": os.path.basename(file_path),
                "data": file_content,
                "timestamp": datetime.now().isoformat()
            }
            
            data = json.dumps(file_data, ensure_ascii=False)
            filename = self.get_input("–ò–º—è —Ñ–∞–π–ª–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è", required=False, default="file_qr.png")
            
            return data, filename
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
            return None, None
    
    def url_encode(self, text):
        """–ü—Ä–æ—Å—Ç–æ–µ URL –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ"""
        return text.replace(' ', '%20').replace('&', '%26')
    
    def get_qr_settings(self):
        """–ü–æ–ª—É—á–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è QR-–∫–æ–¥–∞"""
        print("\nüé® –ù–ê–°–¢–†–û–ô–ö–ò QR-–ö–û–î–ê")
        print("-" * 20)
        
        settings = {}
        
        # –¶–≤–µ—Ç–∞
        color_choice = self.get_user_choice(
            {'1': '‚ö´ –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π (—á–µ—Ä–Ω—ã–π/–±–µ–ª—ã–π)',
             '2': '‚ö™ –ò–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π (–±–µ–ª—ã–π/—á–µ—Ä–Ω—ã–π)',
             '3': 'üîµ –°–∏–Ω–∏–π',
             '4': 'üü¢ –ó–µ–ª–µ–Ω—ã–π',
             '5': 'üî¥ –ö—Ä–∞—Å–Ω—ã–π',
             '6': 'üü£ –§–∏–æ–ª–µ—Ç–æ–≤—ã–π',
             '7': 'üé® –ö–∞—Å—Ç–æ–º–Ω—ã–π'},
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ü–≤–µ—Ç–æ–≤—É—é —Å—Ö–µ–º—É"
        )
        
        color_presets = {
            '1': ('#000000', '#FFFFFF'),
            '2': ('#FFFFFF', '#000000'),
            '3': ('#1E40AF', '#EFF6FF'),
            '4': ('#065F46', '#ECFDF5'),
            '5': ('#991B1B', '#FEF2F2'),
            '6': ('#5B21B6', '#FAF5FF'),
        }
        
        if color_choice == '7':
            fill_color = self.get_input("–¶–≤–µ—Ç QR-–∫–æ–¥–∞ (HEX)", required=False, default="#000000")
            bg_color = self.get_input("–¶–≤–µ—Ç —Ñ–æ–Ω–∞ (HEX)", required=False, default="#FFFFFF")
        else:
            fill_color, bg_color = color_presets[color_choice]
        
        settings['fill_color'] = fill_color
        settings['bg_color'] = bg_color
        
        # –†–∞–∑–º–µ—Ä
        size_choice = self.get_user_choice(
            {'1': 'üî≤ –ú–∞–ª–µ–Ω—å–∫–∏–π',
             '2': 'üî≥ –°—Ä–µ–¥–Ω–∏–π',
             '3': 'üî≤ –ë–æ–ª—å—à–æ–π',
             '4': 'üìè –ö–∞—Å—Ç–æ–º–Ω—ã–π'},
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–º–µ—Ä"
        )
        
        size_presets = {'1': 8, '2': 12, '3': 16}
        if size_choice == '4':
            box_size = int(self.get_input("–†–∞–∑–º–µ—Ä –∫–≤–∞–¥—Ä–∞—Ç–∞ (6-20)", required=False, default="12"))
        else:
            box_size = size_presets[size_choice]
        
        settings['box_size'] = box_size
        
        return settings
    
    def generate_qr_code(self, data, filename, settings):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç QR-–∫–æ–¥"""
        if data is None:
            return False
            
        try:
            # –°–æ–∑–¥–∞–µ–º QR-–∫–æ–¥
            qr = qrcode.QRCode(
                version=None,
                error_correction=qrcode.constants.ERROR_CORRECT_H,
                box_size=settings['box_size'],
                border=4,
            )
            qr.add_data(data)
            qr.make(fit=True)
            
            # –°–æ–∑–¥–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            qr_img = qr.make_image(
                fill_color=settings['fill_color'],
                back_color=settings['bg_color']
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º
            qr_img.save(filename)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
            file_size = os.path.getsize(filename) // 1024
            data_size = len(data) // 1024 if len(data) > 1024 else len(data)
            data_unit = "KB" if len(data) > 1024 else "bytes"
            
            print(f"\n‚úÖ QR-–∫–æ–¥ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!")
            print(f"üìÅ –§–∞–π–ª: {filename}")
            print(f"üìä –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {file_size} KB")
            print(f"üìà –†–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö: {data_size} {data_unit}")
            print(f"üé® –¶–≤–µ—Ç–∞: QR-–∫–æ–¥ {settings['fill_color']}, —Ñ–æ–Ω {settings['bg_color']}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–≤—å—é –≤ –∫–æ–Ω—Å–æ–ª–∏ (—É–ø—Ä–æ—â–µ–Ω–Ω–æ–µ)
            preview = data[:100] + "..." if len(data) > 100 else data
            print(f"\nüëÄ –ü—Ä–µ–≤—å—é –¥–∞–Ω–Ω—ã—Ö: {preview}")
            
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ QR-–∫–æ–¥–∞: {e}")
            return False
    
    def main_menu(self):
        """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø—Ä–æ–≥—Ä–∞–º–º—ã"""
        while True:
            self.clear_screen()
            self.print_header()
            
            print("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä QR-–∫–æ–¥–æ–≤!")
            print("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è:\n")
            
            choice = self.get_user_choice(
                {key: value['name'] for key, value in self.data_types.items()}
            )
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            data, filename = self.data_types[choice]['handler']()
            
            if data is None:
                input("\n‚èé –ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
                continue
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            settings = self.get_qr_settings()
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º QR-–∫–æ–¥
            success = self.generate_qr_code(data, filename, settings)
            
            # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –æ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–∏
            if success:
                continue_choice = self.get_user_choice(
                    {'1': 'üîÑ –°–æ–∑–¥–∞—Ç—å –µ—â–µ –æ–¥–∏–Ω QR-–∫–æ–¥',
                     '2': 'üîì –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å QR-–∫–æ–¥',
                     '3': 'üö™ –í—ã–π—Ç–∏ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã'},
                    "–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?"
                )
                
                if continue_choice == '2':
                    self.decrypt_menu()
                elif continue_choice == '3':
                    print("\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è! –°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã!")
                    break
            else:
                input("\n‚èé –ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
    
    def decrypt_menu(self):
        """–ú–µ–Ω—é –¥–ª—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏ QR-–∫–æ–¥–æ–≤"""
        print("\nüîì –†–ê–°–®–ò–§–†–û–í–ö–ê QR-–ö–û–î–û–í")
        print("-" * 25)
        
        qr_image_path = self.get_input("–ü—É—Ç—å –∫ QR-–∫–æ–¥—É —Å –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏", required=True)
        
        if not os.path.exists(qr_image_path):
            print("‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return
        
        try:
            # –î–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –Ω—É–∂–Ω–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç—å QR-–∫–æ–¥
            # –ó–¥–µ—Å—å –ø—Ä–æ—Å—Ç–æ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è
            print("\n‚ö†Ô∏è  –î–ª—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è:")
            print("   - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–∏–±–ª–∏–æ—Ç–µ–∫—É –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è QR-–∫–æ–¥–æ–≤ (pyzbar)")
            print("   - –ò–º–µ—Ç—å –∏—Å—Ö–æ–¥–Ω—ã–µ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
            print("   - –ó–Ω–∞—Ç—å –ø–∞—Ä–æ–ª—å –¥–ª—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏")
            
            password = self.get_input("–ü–∞—Ä–æ–ª—å –¥–ª—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏", password=True)
            
            # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã —Å —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ–º
            test_data = "–¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"
            encrypted = self.encoder.encrypt_data(test_data, password)
            decrypted = self.encoder.decrypt_data(encrypted, password)
            
            print(f"\nüîê –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è:")
            print(f"üì§ –ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {test_data}")
            print(f"üì• –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {decrypted}")
            print("‚úÖ –ê–ª–≥–æ—Ä–∏—Ç–º —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–µ: {e}")
        
        input("\n‚èé –ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã"""
    try:
        generator = QRCodeGenerator()
        generator.main_menu()
    except KeyboardInterrupt:
        print("\n\nüëã –ü—Ä–æ–≥—Ä–∞–º–º–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º. –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
    except Exception as e:
        print(f"\n‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    main()